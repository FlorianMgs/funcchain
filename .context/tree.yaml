name: .
nodes:
- name: LICENSE
  sha256: 310a96d6b9460a2c45b989a41405472d1269150b6f4f44509d423e437d1b09ca
  summary: This file is an MIT License issued by Dominic in 2023, granting free usage,
    modification, and distribution rights of the associated software, with the condition
    of including this license in all copies or substantial portions of the software,
    and disclaiming any warranties or liabilities related to the software.
- name: pyproject.toml
  sha256: 0ca826cef01263812b487366fd2b0e90770f31e20e4fc32ea6fcace349d2a2dd
  summary: This is a Poetry configuration file for the Python package "funcchain"
    version 0.0.9, which requires Python 3.10 or later and includes dependencies like
    langchain, pydantic, and others. It also specifies dev dependencies, pytest options,
    isort settings, flake8 rules, and the build system details.
- name: tests
  nodes:
  - name: tests/extraction_test.py
    sha256: b137a9629a5f894bbe9b2e12530ccc76f3b8304da9aa11a0e3b311e547ef4ab8
    summary: The file defines a Task class with attributes like name, description,
      difficulty, and keywords, and includes methods for creating a task description,
      extracting a task from its description, and comparing two tasks for equality.
      It also contains a test function to validate the extraction process.
  sha256: 7a06ccfabaa6d66123efb3a204c556a24a0197fe3973637724e115699f568850
- name: README.md
  sha256: 5c5763364475b9dfafe7aa940b4c8133cd2f561e892df1f81a22c7f7cd84db65
  summary: The file is about 'funcchain', a tool that allows you to write language
    chain prompts as Python functions, with a demo image illustrating its usage.
- name: .gitignore
  sha256: e58a80897a9869468c5f695070a4e4047d3e8bbcf08b0bdfff68e4182266024f
  summary: This file is a .gitignore template for Python projects, specifying files
    and directories such as compiled code, distribution packages, logs, test reports,
    environment-specific files, and IDE-specific settings that should be ignored by
    Git.
- name: examples
  nodes:
  - name: examples/codeblock_example.py
    sha256: 1b0635b6ede0d29ee9add7641d58e76cb6d1c9dda1ade2e4742af59045162b32
    summary: The file defines a Python script that includes a function to generate
      code based on a given task description, and a main function that tests this
      code generation with a specific task, printing the result.
  - name: examples/funcchain_tutorial.py
    sha256: 9329b4e1af744a456fc26f3ab7b855d213ed35c4144f0fbd53947360473c651d
    summary: This Python script defines functions for language analysis, including
      greeting in multiple languages, identifying languages in a text, and extracting
      tasks from a text, using the Pydantic library for data validation and settings
      management. It also includes classes for language analysis and task extraction,
      with built-in validators for data integrity.
  - name: examples/router_chain.py
    sha256: eb1d12cea6bcf678c256aef1c4ecbc458267979b3a15b7efb5e00ca4fe80bef8
    summary: The file defines a routing system for handling different types of user
      queries (pdf, csv, normal_answer), using Python's Enum and match-case features,
      and a Router class that uses the Routes enum to select the appropriate handler
      for a given user query.
  - name: examples/email_answering.py
    sha256: b33eead3b4e5d5e8005e487863f4e05c47ea546c97097f0c58970bda8799467b
    summary: The script fetches emails from the Mail app using AppleScript, parses
      the output into a list of tuples containing email titles and contents, and attempts
      to answer each email using a function that takes the email and a personal context
      as input, with the personal context being a description of the user's current
      situation.
  - name: examples/agent.py
    sha256: af1989ee1403f9178091a9ed4e4a45a680a2e5f3eb8ae053ac022caaa67f7a1c
    summary: The file defines a Python script that sets up an API key for OpenAI,
      initializes a CodeBox instance, and provides a dictionary of tools for executing
      Python, bash, or text-based actions. It also defines a Pydantic model for agent
      actions and a function to select the best strategy based on a user query.
  - name: examples/code_llama.py
    sha256: 22750e418d2c47eb03fa31aa894821807beb7e536769dcb4b439bba2f5eed8e5
    summary: The file uses the transformers library to load a pretrained model for
      text generation, sets up a pipeline with this model, and generates code based
      on the input "def add(a, b):", controlling the generation with various parameters.
  - name: examples/gather_infos.py
    sha256: 27411dbd4538e46682e8ad32bf5ca5357e60e42f7422802bd0f49f26526d3740
    summary: This Python script defines a Task class with attributes like name, description,
      difficulty, and keywords, and includes functions to gather task information
      from user input, display it, and run the main program.
  - name: examples/summary.py
    sha256: 3040a8d22850e33303994244f05e435f33aaec438341dd6e6caa8291ee1c8a72
    summary: This Python script uses the funcchain library to summarize the content
      of a given file. It prompts the user for a file path, reads the content, and
      then passes it to a summary function, which is expected to return a summarized
      version of the content. The summary is then printed out. The funcchain library
      is configured with an OpenAI API key.
  - name: examples/compare_models.py
    sha256: cec9c5e6d87519a2ce3b6604622c1e59c021affdd8920b74e00367bdda2d3548
    summary: The file defines a Task class with attributes like name, description,
      difficulty, and keywords, and includes functions to create a task description,
      extract a task from its description, and compare two tasks. It also contains
      a test function to validate the task extraction process.
  - name: examples/assets
    nodes:
    - name: examples/assets/example.png
      sha256: error
      summary: N/A
    sha256: ca00fccfb408989eddc401062c4d1219a6aceb6b9b55412357f1790862e8f178
  sha256: dc4c63c20eaf3b5abb4aff43fdff0446c917cf168ae09561544deb82c96e645d
- name: .env.example
  sha256: a55114380e46d916e4384f14e255b1cf951af15c25606dd151f30a1211eb40ae
  summary: The file contains configuration settings for a program, including a debug
    mode toggle and an API key for OpenAI, with additional settings referenced in
    'funcchain/config.py'.
- name: funcchain
  nodes:
  - name: funcchain/config.py
    sha256: f253b2b9f4c0387ebc88ffc28b6dfbf8b54b6df3642dfa80548d14b56fc43f27
    summary: This Python file defines a class for managing settings in the Funcchain
      application, including general settings, prompt settings, API keys for various
      services, Azure-specific settings, and model parameters, with the ability to
      load environment variables from a .env file.
  - name: funcchain/chain.py
    sha256: aed627afafdfd489fb9381c97c6e229fd556c87f225c8bb73872f12430deb4b4
    summary: The file defines functions for creating and executing a chain of operations,
      including parsing and formatting instructions, invoking a sequence of functions,
      and logging the cost of operations. It also handles retries and supports both
      synchronous and asynchronous execution.
  - name: funcchain/__init__.py
    sha256: d2006975977c4905fb0c929a82855ff1c256fe2588feb088b51c6e6c433c67fd
    summary: The file is a Python module that imports 'settings' from funcchain.config,
      'chain' and 'achain' from funcchain.chain, and 'BaseModel' from langchain.pydantic_v1,
      and then makes these available for external use via the __all__ variable.
  - name: funcchain/utils
    nodes:
    - name: funcchain/utils/model_defaults.py
      sha256: da8d09141a6375dfcfbb6ffe6af13a6ecae47cbdfb2cf71d203223aaee4b5ba2
      summary: The file contains functions to automatically select and return a chat
        model interface based on the API keys found in the environment variables.
        It supports various providers such as OpenAI, Azure, Anthropic, Google, and
        Jina. It also includes a function to create a Language Model with fallbacks
        for long context, prioritizing Azure if available.
    - name: funcchain/utils/__init__.py
      sha256: e747bd1d67069dceb7d83a22285369bd5c2558a69aa8e3f61c1088012b9cdc4f
      summary: The file contains utility imports for a Python project, specifically
        importing modules related to function frames, helper functions, and default
        models from a package named 'funcchain'.
    - name: funcchain/utils/function_frame.py
      sha256: 3826dd5abe4e721655af5eec5c65cef4827a96e9f6a4347f9ead05f557b896c0
      summary: The file defines a set of utility functions for Python code introspection,
        including retrieving the docstring, output type annotation, and keyword arguments
        from the parent caller function, as well as determining the appropriate parser
        based on the output type annotation.
    - name: funcchain/utils/helpers.py
      sha256: 33125615c356ae70cd6617fa3d019eacfb19fb6b5534b6e585f3ca2011fc5f8e
      summary: The file contains utility functions for a language model application,
        including a retry decorator for parsing output, a token counter, a function
        to identify the type of language model, a function to check if a model is
        a function model, a recursive key remover for dictionaries, and a function
        to convert Pydantic objects to function schemas.
    sha256: 2db7cb7be244fad84bb82f7bedc66965f782d93d5a6e64571815247fa973f3ba
  - name: funcchain/parser.py
    sha256: a5e608cad7237578ca3d983da581d38846accf36f71ddbe1a43f79383aa8b78f
    summary: The file defines various classes for parsing different types of outputs,
      such as lambda, boolean, and Pydantic-based objects, with a special focus on
      handling code blocks. It also includes error handling for parsing failures.
  - name: funcchain/prompt.py
    sha256: 4c0d34cdd0cc551af543972b6d009cbb7ab9d6cf3026d6c60157ff2e4752e6b3
    summary: The file contains a Python function for creating a chat prompt template
      from an instruction and a system message, with token count checks to ensure
      content doesn't exceed a maximum limit, supporting both jinja2 and f-string
      formats.
  sha256: 887c2e516a03dba42c228f2a93ec2486f6f3d8a60b2e5e97480ae901590e7ee1
sha256: 2e5b76773bcb95e840a04e289fe5bf95601dcafe3eb8052e102d98c1cdb8667e
